import qsdk     # from qsdk import nCX

DISP_EN = False

def U_add(k, move, head, anc):
    # Increment using Adder

    reg_a = move
    reg_a.extend([-1]*(len(head)-len(move)))
    
    reg_b = head
    
    reg_c = [-1]        # No initial carry
    reg_c.extend(anc)
    reg_c.append(-1)    # Ignore Head position under/overflow. Trim bits. Last carry not accounted, All-ones overflows to All-zeros

    def q_carry(k, q0, q1, q2, q3):
        if (q1 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q1, q2, q3])
        if (q1 != -1 and q2 != -1):                 k.gate('cnot', [q1, q2])
        if (q0 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q0, q2, q3])
    def q_mid(k, q0, q1):
        if (q0 != -1 and q1 != -1):                 k.gate('cnot', [q0, q1])
    def q_sum(k, q0, q1, q2):
        if (q0 != -1 and q2 != -1):                 k.gate('cnot', [q0, q2])
        if (q1 != -1 and q2 != -1):                 k.gate('cnot', [q1, q2])
    def q_rcarry(k, q0, q1, q2, q3):
        if (q0 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q0, q2, q3])
        if (q1 != -1 and q2 != -1):                 k.gate('cnot', [q1, q2])
        if (q1 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q1, q2, q3])

    # Quantum Adder
    for i in range(0,len(head)):
        q_carry(k,reg_c[i],reg_a[i],reg_b[i],reg_c[i+1])
    q_mid(k,reg_a[i],reg_b[i])
    q_sum(k,reg_c[i],reg_a[i],reg_b[i])
    for i in range(len(head)-2,-1,-1):
        q_rcarry(k,reg_c[i],reg_a[i],reg_b[i],reg_c[i+1])
        q_sum(k,reg_c[i],reg_a[i],reg_b[i])

    if (DISP_EN): k.display()
    return

def U_sub(k, move, head, anc):
    # Decrement using Subtractor

    reg_a = move
    reg_a.extend([-1]*(len(head)-len(move)))
    
    reg_b = head
    
    reg_c = [-1]        # No initial carry
    reg_c.extend(anc)
    reg_c.append(-1)    # Ignore Head position under/overflow. Trim bits. Last carry not accounted, All-ones overflows to All-zeros

    def q_carry(k, q0, q1, q2, q3):
        if (q1 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q1, q2, q3])
        if (q1 != -1 and q2 != -1):                 k.gate('cnot', [q1, q2])
        if (q0 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q0, q2, q3])
    def q_mid(k, q0, q1):
        if (q0 != -1 and q1 != -1):                 k.gate('cnot', [q0, q1])
    def q_sum(k, q0, q1, q2):
        if (q0 != -1 and q2 != -1):                 k.gate('cnot', [q0, q2])
        if (q1 != -1 and q2 != -1):                 k.gate('cnot', [q1, q2])
    def q_rcarry(k, q0, q1, q2, q3):
        if (q0 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q0, q2, q3])
        if (q1 != -1 and q2 != -1):                 k.gate('cnot', [q1, q2])
        if (q1 != -1 and q2 != -1 and q3 != -1):    k.gate('toffoli', [q1, q2, q3])

    k.gate('x', [reg_a[0]])
    # Quantum Subtractor
    for i in range(0,len(head)-1):
        q_sum(k,reg_c[i],reg_a[i],reg_b[i])
        q_carry(k,reg_c[i],reg_a[i],reg_b[i],reg_c[i+1])
    q_sum(k,reg_c[i+1],reg_a[i+1],reg_b[i+1])
    q_mid(k,reg_a[i+1],reg_b[i+1])
    for i in range(len(head)-2,-1,-1):
        q_rcarry(k,reg_c[i],reg_a[i],reg_b[i],reg_c[i+1])
    k.gate('x', [reg_a[0]])

    if (DISP_EN): k.display()
    return

import os
from openql import openql as ql
import qxelarator

def unit_tests():

    curdir = os.path.dirname(__file__)
    output_dir = os.path.join(curdir, 'qasm')

    ql.set_option('output_dir', output_dir)
    ql.set_option('write_qasm_files', 'yes')

    config_fn  = os.path.join(curdir, 'config_qx.json')
    platform   = ql.Platform('platform_none', config_fn)

    move = [0]          # Addend: 1-bit Move
    head = [1,2,3,4]    # Augend: 4-bit Head 
    anc = [5,6,7]       # Carry: uncomputed ancilla
    mod = [8,9]         # Modulo for 12 and Ancilla for nCX
    test = [10,11,12,13]
    
    circ_width = len(move) + len(head) + len(anc) + len(mod) + len(test)

    p = ql.Program('aritra', platform, circ_width)
    k_move = ql.Kernel("mod_move", platform, circ_width)

    # Test using full superposition of head, both inc/dec and association to initial state
    for i in range(0,len(head)):
        k_move.gate('h',[head[i]])
        k_move.gate('cnot',[head[i],test[i]]) 
    k_move.gate('h', [move[0]])

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    # # Test modulo incrementor

    # # if move==1 and head==1011, mod==1
    # k_move.gate('x',[head[2]])
    # print("ctrl",[move[0],head[0],head[1],head[2],head[3]],"targ",[mod[0]],"anc",[mod[1]])
    # qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    # k_move.gate('x',[head[2]])

    # # (+0.176777,+0) |0000-00-000-0000-0> +
    # # (+0.176777,+0) |0000-00-000-0000-1> +
    # # (+0.176777,+0) |0001-00-000-0001-0> +
    # # (+0.176777,+0) |0001-00-000-0001-1> +
    # # (+0.176777,+0) |0010-00-000-0010-0> +
    # # (+0.176777,+0) |0010-00-000-0010-1> +
    # # (+0.176777,+0) |0011-00-000-0011-0> +
    # # (+0.176777,+0) |0011-00-000-0011-1> +
    # # (+0.176777,+0) |0100-00-000-0100-0> +
    # # (+0.176777,+0) |0100-00-000-0100-1> +
    # # (+0.176777,+0) |0101-00-000-0101-0> +
    # # (+0.176777,+0) |0101-00-000-0101-1> +
    # # (+0.176777,+0) |0110-00-000-0110-0> +
    # # (+0.176777,+0) |0110-00-000-0110-1> +
    # # (+0.176777,+0) |0111-00-000-0111-0> +
    # # (+0.176777,+0) |0111-00-000-0111-1> +
    # # (+0.176777,+0) |1000-00-000-1000-0> +
    # # (+0.176777,+0) |1000-00-000-1000-1> +
    # # (+0.176777,+0) |1001-00-000-1001-0> +
    # # (+0.176777,+0) |1001-00-000-1001-1> +
    # # (+0.176777,+0) |1010-00-000-1010-0> +
    # # (+0.176777,+0) |1010-00-000-1010-1> +
    # # (+0.176777,+0) |1011-00-000-1011-0> +
    # # (+0.176777,+0) |1011-01-000-1011-1> + THIS CASE <---------------------
    # # (+0.176777,+0) |1100-00-000-1100-0> + INVALID CASES
    # # (+0.176777,+0) |1100-00-000-1100-1> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-1> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-0> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-0> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-1> + INVALID CASES

    # # 4-bit Adder
    # U_add(k_move, [move[0],-1,mod[0],-1], head, anc) 

    # # (+0.176777,+0) |0000-00-000-0000-0> +
    # # (+0.176777,+0) |0000-00-000-0001-1> +
    # # (+0.176777,+0) |0001-00-000-0001-0> +
    # # (+0.176777,+0) |0001-00-000-0010-1> +
    # # (+0.176777,+0) |0010-00-000-0010-0> +
    # # (+0.176777,+0) |0010-00-000-0011-1> +
    # # (+0.176777,+0) |0011-00-000-0011-0> +
    # # (+0.176777,+0) |0011-00-000-0100-1> +
    # # (+0.176777,+0) |0100-00-000-0100-0> +
    # # (+0.176777,+0) |0100-00-000-0101-1> +
    # # (+0.176777,+0) |0101-00-000-0101-0> +
    # # (+0.176777,+0) |0101-00-000-0110-1> +
    # # (+0.176777,+0) |0110-00-000-0110-0> +
    # # (+0.176777,+0) |0110-00-000-0111-1> +
    # # (+0.176777,+0) |0111-00-000-0111-0> +
    # # (+0.176777,+0) |0111-00-000-1000-1> +
    # # (+0.176777,+0) |1000-00-000-1000-0> +
    # # (+0.176777,+0) |1000-00-000-1001-1> +
    # # (+0.176777,+0) |1001-00-000-1001-0> +
    # # (+0.176777,+0) |1001-00-000-1010-1> +
    # # (+0.176777,+0) |1010-00-000-1010-0> +
    # # (+0.176777,+0) |1010-00-000-1011-1> +
    # # (+0.176777,+0) |1011-00-000-1011-0> +
    # # (+0.176777,+0) |1011-01-000-0000-1> + THIS CASE <---------------------
    # # (+0.176777,+0) |1100-00-000-1100-0> + INVALID CASES
    # # (+0.176777,+0) |1100-00-000-1101-1> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1110-1> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-0> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1111-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-0000-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-0> + INVALID CASES

    # # if move==1 and head==0000, mod==0
    # k_move.gate('x',[head[0]])
    # k_move.gate('x',[head[1]])
    # k_move.gate('x',[head[2]])
    # k_move.gate('x',[head[3]])
    # qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    # k_move.gate('x',[head[0]])
    # k_move.gate('x',[head[1]])
    # k_move.gate('x',[head[2]])
    # k_move.gate('x',[head[3]])
    
    # # (+0.176777,+0) |0000-00-000-0000-0> +
    # # (+0.176777,+0) |0000-00-000-0001-1> +
    # # (+0.176777,+0) |0001-00-000-0001-0> +
    # # (+0.176777,+0) |0001-00-000-0010-1> +
    # # (+0.176777,+0) |0010-00-000-0010-0> +
    # # (+0.176777,+0) |0010-00-000-0011-1> +
    # # (+0.176777,+0) |0011-00-000-0011-0> +
    # # (+0.176777,+0) |0011-00-000-0100-1> +
    # # (+0.176777,+0) |0100-00-000-0100-0> +
    # # (+0.176777,+0) |0100-00-000-0101-1> +
    # # (+0.176777,+0) |0101-00-000-0101-0> +
    # # (+0.176777,+0) |0101-00-000-0110-1> +
    # # (+0.176777,+0) |0110-00-000-0110-0> +
    # # (+0.176777,+0) |0110-00-000-0111-1> +
    # # (+0.176777,+0) |0111-00-000-0111-0> +
    # # (+0.176777,+0) |0111-00-000-1000-1> +
    # # (+0.176777,+0) |1000-00-000-1000-0> +
    # # (+0.176777,+0) |1000-00-000-1001-1> +
    # # (+0.176777,+0) |1001-00-000-1001-0> +
    # # (+0.176777,+0) |1001-00-000-1010-1> +
    # # (+0.176777,+0) |1010-00-000-1010-0> +
    # # (+0.176777,+0) |1010-00-000-1011-1> +
    # # (+0.176777,+0) |1011-00-000-0000-1> + THIS CASE <---------------------
    # # (+0.176777,+0) |1011-00-000-1011-0> +
    # # (+0.176777,+0) |1100-00-000-1100-0> + INVALID CASES
    # # (+0.176777,+0) |1100-00-000-1101-1> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1110-1> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-0> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1111-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-0> + INVALID CASES
    # # (+0.176777,+0) |1111-01-000-0000-1> + INVALID CASES

    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    # # Test modulo decrementor

    # # if move==0 and head==0000, mod==1
    # k_move.gate('x',[head[0]])
    # k_move.gate('x',[head[1]])
    # k_move.gate('x',[head[2]])
    # k_move.gate('x',[head[3]])
    # k_move.gate('x',[move[0]])
    # print("ctrl",[move[0],head[0],head[1],head[2],head[3]],"targ",[mod[0]],"anc",[mod[1]])
    # qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    # k_move.gate('x',[head[0]])
    # k_move.gate('x',[head[1]])
    # k_move.gate('x',[head[2]])
    # k_move.gate('x',[head[3]])
    # k_move.gate('x',[move[0]])

    # # (+0.176777,+0) |0000-00-000-0000-1> +
    # # (+0.176777,+0) |0000-01-000-0000-0> + THIS CASE <---------------------
    # # (+0.176777,+0) |0001-00-000-0001-0> +
    # # (+0.176777,+0) |0001-00-000-0001-1> +
    # # (+0.176777,+0) |0010-00-000-0010-0> +
    # # (+0.176777,+0) |0010-00-000-0010-1> +
    # # (+0.176777,+0) |0011-00-000-0011-0> +
    # # (+0.176777,+0) |0011-00-000-0011-1> +
    # # (+0.176777,+0) |0100-00-000-0100-0> +
    # # (+0.176777,+0) |0100-00-000-0100-1> +
    # # (+0.176777,+0) |0101-00-000-0101-0> +
    # # (+0.176777,+0) |0101-00-000-0101-1> +
    # # (+0.176777,+0) |0110-00-000-0110-0> +
    # # (+0.176777,+0) |0110-00-000-0110-1> +
    # # (+0.176777,+0) |0111-00-000-0111-0> +
    # # (+0.176777,+0) |0111-00-000-0111-1> +
    # # (+0.176777,+0) |1000-00-000-1000-0> +
    # # (+0.176777,+0) |1000-00-000-1000-1> +
    # # (+0.176777,+0) |1001-00-000-1001-0> +
    # # (+0.176777,+0) |1001-00-000-1001-1> +
    # # (+0.176777,+0) |1010-00-000-1010-0> +
    # # (+0.176777,+0) |1010-00-000-1010-1> +
    # # (+0.176777,+0) |1011-00-000-1011-0> +
    # # (+0.176777,+0) |1011-00-000-1011-1> +
    # # (+0.176777,+0) |1100-00-000-1100-0> + INVALID CASES
    # # (+0.176777,+0) |1100-00-000-1100-1> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-1> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-0> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-0> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-1> + INVALID CASES

    # # 4-bit Subtractor
    # U_sub(k_move, [move[0],-1,mod[0],-1], head, anc) 

    # # (+0.176777,+0) |0000-00-000-0000-1> +
    # # (+0.176777,+0) |0000-01-000-1011-0> + THIS CASE <---------------------
    # # (+0.176777,+0) |0001-00-000-0000-0> +
    # # (+0.176777,+0) |0001-00-000-0001-1> +
    # # (+0.176777,+0) |0010-00-000-0001-0> +
    # # (+0.176777,+0) |0010-00-000-0010-1> +
    # # (+0.176777,+0) |0011-00-000-0010-0> +
    # # (+0.176777,+0) |0011-00-000-0011-1> +
    # # (+0.176777,+0) |0100-00-000-0011-0> +
    # # (+0.176777,+0) |0100-00-000-0100-1> +
    # # (+0.176777,+0) |0101-00-000-0100-0> +
    # # (+0.176777,+0) |0101-00-000-0101-1> +
    # # (+0.176777,+0) |0110-00-000-0101-0> +
    # # (+0.176777,+0) |0110-00-000-0110-1> +
    # # (+0.176777,+0) |0111-00-000-0110-0> +
    # # (+0.176777,+0) |0111-00-000-0111-1> +
    # # (+0.176777,+0) |1000-00-000-0111-0> +
    # # (+0.176777,+0) |1000-00-000-1000-1> +
    # # (+0.176777,+0) |1001-00-000-1000-0> +
    # # (+0.176777,+0) |1001-00-000-1001-1> +
    # # (+0.176777,+0) |1010-00-000-1001-0> +
    # # (+0.176777,+0) |1010-00-000-1010-1> +
    # # (+0.176777,+0) |1011-00-000-1010-0> +
    # # (+0.176777,+0) |1011-00-000-1011-1> +
    # # (+0.176777,+0) |1100-00-000-1011-0> + INVALID CASES
    # # (+0.176777,+0) |1100-00-000-1100-1> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1100-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-1> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1101-0> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1110-0> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-1> + INVALID CASES

    # # if move==0 and head==1011, mod==0
    # k_move.gate('x',[head[2]])
    # k_move.gate('x',[move[0]])
    # qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    # k_move.gate('x',[head[2]])
    # k_move.gate('x',[move[0]])

    # # (+0.176777,+0) |0000-00-000-0000-1> +
    # # (+0.176777,+0) |0000-00-000-1011-0> + THIS CASE <---------------------
    # # (+0.176777,+0) |0001-00-000-0000-0> +
    # # (+0.176777,+0) |0001-00-000-0001-1> +
    # # (+0.176777,+0) |0010-00-000-0001-0> +
    # # (+0.176777,+0) |0010-00-000-0010-1> +
    # # (+0.176777,+0) |0011-00-000-0010-0> +
    # # (+0.176777,+0) |0011-00-000-0011-1> +
    # # (+0.176777,+0) |0100-00-000-0011-0> +
    # # (+0.176777,+0) |0100-00-000-0100-1> +
    # # (+0.176777,+0) |0101-00-000-0100-0> +
    # # (+0.176777,+0) |0101-00-000-0101-1> +
    # # (+0.176777,+0) |0110-00-000-0101-0> +
    # # (+0.176777,+0) |0110-00-000-0110-1> +
    # # (+0.176777,+0) |0111-00-000-0110-0> +
    # # (+0.176777,+0) |0111-00-000-0111-1> +
    # # (+0.176777,+0) |1000-00-000-0111-0> +
    # # (+0.176777,+0) |1000-00-000-1000-1> +
    # # (+0.176777,+0) |1001-00-000-1000-0> +
    # # (+0.176777,+0) |1001-00-000-1001-1> +
    # # (+0.176777,+0) |1010-00-000-1001-0> +
    # # (+0.176777,+0) |1010-00-000-1010-1> +
    # # (+0.176777,+0) |1011-00-000-1010-0> +
    # # (+0.176777,+0) |1011-00-000-1011-1> +
    # # (+0.176777,+0) |1100-00-000-1100-1> + INVALID CASES
    # # (+0.176777,+0) |1100-01-000-1011-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1100-0> + INVALID CASES
    # # (+0.176777,+0) |1101-00-000-1101-1> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1101-0> + INVALID CASES
    # # (+0.176777,+0) |1110-00-000-1110-1> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1110-0> + INVALID CASES
    # # (+0.176777,+0) |1111-00-000-1111-1> + INVALID CASES


    ##########################################################################################################
    ##########################################################################################################
    ##########################################################################################################

    # Integrated

    # Test modulo incrementor

    # if move==1 and head==1011, mod==1
    k_move.gate('x',[head[2]])
    qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    k_move.gate('x',[head[2]])
    # 4-bit Adder
    U_add(k_move, [move[0],-1,mod[0],-1], head, anc) 
    # if move==1 and head==0000, mod==0
    k_move.gate('x',[head[0]])
    k_move.gate('x',[head[1]])
    k_move.gate('x',[head[2]])
    k_move.gate('x',[head[3]])
    qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    k_move.gate('x',[head[0]])
    k_move.gate('x',[head[1]])
    k_move.gate('x',[head[2]])
    k_move.gate('x',[head[3]])
    
    # Test modulo decrementor

    # if move==0 and head==0000, mod==1
    k_move.gate('x',[head[0]])
    k_move.gate('x',[head[1]])
    k_move.gate('x',[head[2]])
    k_move.gate('x',[head[3]])
    k_move.gate('x',[move[0]])
    qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    k_move.gate('x',[head[0]])
    k_move.gate('x',[head[1]])
    k_move.gate('x',[head[2]])
    k_move.gate('x',[head[3]])
    k_move.gate('x',[move[0]])
    # 4-bit Subtractor
    U_sub(k_move, [move[0],-1,mod[0],-1], head, anc) 
    # if move==0 and head==1011, mod==0
    k_move.gate('x',[head[2]])
    k_move.gate('x',[move[0]])
    qsdk.nCX(k_move, [move[0],head[0],head[1],head[2],head[3]], [mod[0]], [mod[1]])
    k_move.gate('x',[head[2]])
    k_move.gate('x',[move[0]])

    # (+0.176777,+0) |0000-00-000-0001-1> +
    # (+0.176777,+0) |0000-00-000-1011-0> + THIS CASE <---------------------
    # (+0.176777,+0) |0001-00-000-0000-0> +
    # (+0.176777,+0) |0001-00-000-0010-1> +
    # (+0.176777,+0) |0010-00-000-0001-0> +
    # (+0.176777,+0) |0010-00-000-0011-1> +
    # (+0.176777,+0) |0011-00-000-0010-0> +
    # (+0.176777,+0) |0011-00-000-0100-1> +
    # (+0.176777,+0) |0100-00-000-0011-0> +
    # (+0.176777,+0) |0100-00-000-0101-1> +
    # (+0.176777,+0) |0101-00-000-0100-0> +
    # (+0.176777,+0) |0101-00-000-0110-1> +
    # (+0.176777,+0) |0110-00-000-0101-0> +
    # (+0.176777,+0) |0110-00-000-0111-1> +
    # (+0.176777,+0) |0111-00-000-0110-0> +
    # (+0.176777,+0) |0111-00-000-1000-1> +
    # (+0.176777,+0) |1000-00-000-0111-0> +
    # (+0.176777,+0) |1000-00-000-1001-1> +
    # (+0.176777,+0) |1001-00-000-1000-0> +
    # (+0.176777,+0) |1001-00-000-1010-1> +
    # (+0.176777,+0) |1010-00-000-1001-0> +
    # (+0.176777,+0) |1010-00-000-1011-1> +
    # (+0.176777,+0) |1011-00-000-0000-1> + THIS CASE <---------------------
    # (+0.176777,+0) |1011-00-000-1010-0> +
    # (+0.176777,+0) |1100-00-000-1101-1> + INVALID CASES
    # (+0.176777,+0) |1100-01-000-1011-0> + INVALID CASES
    # (+0.176777,+0) |1101-00-000-1100-0> + INVALID CASES
    # (+0.176777,+0) |1101-00-000-1110-1> + INVALID CASES
    # (+0.176777,+0) |1110-00-000-1101-0> + INVALID CASES
    # (+0.176777,+0) |1110-00-000-1111-1> + INVALID CASES
    # (+0.176777,+0) |1111-00-000-1110-0> + INVALID CASES
    # (+0.176777,+0) |1111-01-000-1100-1> + INVALID CASES

    p.add_kernel(k_move)
    p.compile()
    print(p.qasm())
    qx = qxelarator.QX()
    qx.set(output_dir+'/aritra.qasm')
    qx.execute()
    isv = qx.get_state()
    print(isv)

unit_tests()